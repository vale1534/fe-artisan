<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>前端小匠</title>
    <link>http://fe-artisan.com/</link>
    <description>Recent content on 前端小匠</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Wed, 09 Mar 2016 20:08:11 +0100</lastBuildDate>
    
	<atom:link href="http://fe-artisan.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Roadmap</title>
      <link>http://fe-artisan.com/roadmap/</link>
      <pubDate>Wed, 09 Mar 2016 20:08:11 +0100</pubDate>
      
      <guid>http://fe-artisan.com/roadmap/</guid>
      <description>Quo vadis? The port of the original Material theme has replicated nearly all of its features. A few are still missing but I&amp;rsquo;ve good news: the Hugo community is actively working on this issues. Maybe with the next release of Hugo we can abandon this list. Stay tuned.
Localization Currently, it is possible to collect all strings in a single place for easy customization. However, this only enables you to define all strings in a single language.</description>
    </item>
    
    <item>
      <title>License</title>
      <link>http://fe-artisan.com/license/</link>
      <pubDate>Wed, 09 Mar 2016 20:10:46 +0100</pubDate>
      
      <guid>http://fe-artisan.com/license/</guid>
      <description>Copyright &amp;copy; 2016 Digitalcraftsman digitalcraftsman@protonmail.com
Copyright &amp;copy; 2016 Martin Donath martin.donath@squidfunk.com
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &amp;ldquo;Software&amp;rdquo;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</description>
    </item>
    
    <item>
      <title>Getting started</title>
      <link>http://fe-artisan.com/getting-started/</link>
      <pubDate>Wed, 09 Mar 2016 00:11:02 +0100</pubDate>
      
      <guid>http://fe-artisan.com/getting-started/</guid>
      <description>Installation Installing Hugo Hugo itself is just a single binary without dependencies on expensive runtimes like Ruby, Python or PHP and without dependencies on any databases. You just need to download the latest version. For more information read the official installation guides.
Let&amp;rsquo;s make sure Hugo is set up as expected. You should see a similar version number in your terminal:
hugo version # Hugo Static Site Generator v0.15 BuildDate: 2016-01-03T12:47:47+01:00  Installing Material Next, assuming you have Hugo up and running the hugo-material-docs theme can be installed with git:</description>
    </item>
    
    <item>
      <title>Adding content</title>
      <link>http://fe-artisan.com/adding-content/</link>
      <pubDate>Wed, 09 Mar 2016 19:56:50 +0100</pubDate>
      
      <guid>http://fe-artisan.com/adding-content/</guid>
      <description>Hello world Let&amp;rsquo;s create our first content file for your documentation. Open a terminal and add the following command for each new file you want to add. Replace &amp;lt;section-name&amp;gt; with a general term that describes your document in detail.
hugo new &amp;lt;section-name&amp;gt;/filename.md  Visitors of your website will find the final document under www.example.com/&amp;lt;section-name&amp;gt;/filename/.
Since it&amp;rsquo;s possible to have multiple content files in the same section I recommend to create at least one index.</description>
    </item>
    
    <item>
      <title>自序</title>
      <link>http://fe-artisan.com/</link>
      <pubDate>Tue, 08 Mar 2016 21:07:13 +0100</pubDate>
      
      <guid>http://fe-artisan.com/</guid>
      <description>没有什么美术天分，却热衷表现自己的想法，看到简洁、优雅和高效的技术交互会发自内心的愉悦，这让我不由自主的向往设计。不会画画，不会音乐，我这辈子与艺术创作是没啥缘分的。有点小智商，加上会些依葫芦画瓢的本事，程序员的我，讲的自然是程序为主设计了。 By the way ，代码也有称为艺术的，不是吗。
毕业后，没有留在大公司发展，在小公司混了六年，三十已过，彷徨不安。前面一直是用QT做人机开发，也接触了一些前端的知识，今年来系统自学前端，源于桌面系统表现力不及网页应用，且囊括不了手机客户端的交互需求。身在小公司，还不是软件型的小公司，事事得亲力亲为，时常感觉孤立无助，所以自助的同时，渴望通过网络与同道之人交流。
对于未来，我已经迷茫很久了。没有经济基础，创业的梦想想就行了，养家糊口才是首要的。缺乏职业规划，过了激情滂湃的技术年龄，转行换工作是连勇气都没有的。目前只有维持现状，说不定哪天老板画的饼成真了呢。
说这么多的背景，说明我不是一个经验老道的前端开发者，也隐藏了一个事实，我通过自学使自己成为一个像样的全栈开发者。在这个网站，我想通过键盘记录自己对技术的领悟，积攒前端开发经验，最好让我没有时间去迷茫，那就好了。</description>
    </item>
    
    <item>
      <title>索引</title>
      <link>http://fe-artisan.com/contents/</link>
      <pubDate>Wed, 09 Mar 2016 20:08:11 +0100</pubDate>
      
      <guid>http://fe-artisan.com/contents/</guid>
      <description>我在学习前端，觉得最受用的技能是， 英语阅读 。本站的文章虽然都是中文的，但一些重要的概念和措辞都源自于英文，给大家提个醒。
一个简单的应用，从工具到架构，动不动就依赖成百上千个 NPM 包，要折腾起来时间永远不够用，但不折腾不行，除非放弃前端。重复造的轮子太多，选择性折腾尤为重要，这是我学习前端最大的感悟。
最初我选择的是 Angular ，使用 Angular CLI 工具，感觉很顺手。但不足的是，缺乏可用的 UI 组件。一直关注 material2 组件库，直到目前连基础的树形容器都没有，又找不到替换的库，放弃了。后面又从入门到放弃用了一段时间的 Vue ，解释不清为什么。
一直来，我对 React 的 JSX 发明反感，思维方式跟不上。后来发现很多漂亮的组件架构都是 React 麾下的，特别是 ant-design ，让我眼前一亮，就按照文档试着用 dva-cli 做个几个 hello world ，感觉 JSX 没有想像的那么糟。接着尝试渲染一些常用的组件，按钮、表格、提示框等，效果挺喜欢的，对 React 黑转粉了。
用 dva 套装的时候，发现了几个 bug ，在 Github 上提交了很久，还做了 PR ，但维护人员迟迟没有响应。后面学习到 router ，喜欢 react-router@4 的功能特性，但 dva 还停留在 react-router@2 。觉得还是 create-react-app 可靠，就转了过去，功能简单了一些，但学习目标更明确了。
后来在 medium.com 读到关于 rekit@2.0 的文章，觉得这正是我需要的工具。对比 create-react-app reject 后的项目结构，我发现 rekit 生产的项目组织架构真的很清晰，使用 rekit cli 和 rekit-portal 可以很方便地增删项目代码，自动化程度高，可伸缩性强，媲美我之前用过的 Angular CLI 工具。</description>
    </item>
    
    <item>
      <title>Rekit 最佳实践</title>
      <link>http://fe-artisan.com/rekit/</link>
      <pubDate>Thu, 13 Jul 2017 11:33:11 +0800</pubDate>
      
      <guid>http://fe-artisan.com/rekit/</guid>
      <description>在百花齐放，百家争鸣的今日前端，从不缺轮子，也不缺发动机、车身车架等。要造一辆协调美观，可靠高效的汽车，你需要一份最佳制造指南。 Rekit 就是这样一份指南，而不仅仅是制造工具。
开个头占个位置，留以后写。</description>
    </item>
    
    <item>
      <title>使用 Ant Design 设计组件</title>
      <link>http://fe-artisan.com/rekit/antd-style/</link>
      <pubDate>Wed, 09 Mar 2016 20:08:11 +0100</pubDate>
      
      <guid>http://fe-artisan.com/rekit/antd-style/</guid>
      <description>本文介绍在 rekit 项目中引入 Ant.D ，完成项目代码： rekit-antd-style 。
 Ant design 项目在 github 上的 id 是 ant-design/ant-design ， Ant.D 不是其名字或代号，只是我发现用 Ant.D 指代这个项目很方便，就用上了。
 安装 Ant.D 模块 安装 Ant.D 模块只需要一条命令：
yarn add antd # or npm install --saved antd  完成后就可以在项目组件中引用 Ant.D 的组件了，比如引入 Button ：
import { Button } from &#39;antd&#39;;  Ant.D 实现了丰富的基础组件，参考 官方文档 了解更多。
引入 Ant.D 样式 参照 Ant.D 官方文档 ，要定制样式得引入一大堆的库，包括 less-vars-to-js 和 babel-plugin-import ，还要进行很多的配置 。配置完成后的好处是，按需引入组件样式，减小发送至浏览器的文件大小。但是在我看来，缺点更明显，给我的项目招致了不少的麻烦和复杂度。
于是研究 Ant.D 的样式文件结构，准备强行引入，在项目中直接生产 Ant.</description>
    </item>
    
  </channel>
</rss>